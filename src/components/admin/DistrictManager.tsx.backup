'use client';

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Plus, Edit2, Trash2, Eye } from 'lucide-react';
import { CRUDTable } from '@/components/ui/CRUDTable';
import { AddEditModal } from '@/components/ui/AddEditModal';
import { districtService, provinceService, District, Province } from '@/lib/supabase';

const districtColumns = [
  { key: 'code', label: 'Code', sortable: true },
  { key: 'name', label: 'District Name', sortable: true },
  { key: 'province_name', label: 'Province', sortable: true },
  { key: 'headquarters', label: 'Headquarters', sortable: true },
  { key: 'population', label: 'Population', sortable: true, type: 'number' as const },
  { key: 'status', label: 'Status', sortable: true, type: 'badge' as const },
  { key: 'actions', label: 'Actions', type: 'actions' as const }
];

export function DistrictManager() {
  const [districts, setDistricts] = useState<District[]>([]);
  const [provinces, setProvinces] = useState<Province[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingDistrict, setEditingDistrict] = useState<District | null>(null);
  const [activeTab, setActiveTab] = useState('list');

  const getDistrictFormFields = () => [
    { key: 'name', label: 'District Name', type: 'text' as const, required: true },
    { key: 'code', label: 'District Code', type: 'text' as const, required: true },
    {
      key: 'province_id',
      label: 'Province',
      type: 'select' as const,
      options: provinces.map(p => p.name),
      required: true,
      placeholder: 'Select a province'
    },
    { key: 'headquarters', label: 'Headquarters', type: 'text' as const, required: true },
    { key: 'population', label: 'Population', type: 'number' as const, required: true },
    { key: 'area_sq_km', label: 'Area (km²)', type: 'number' as const, required: true },
    { key: 'status', label: 'Status', type: 'select' as const, options: ['active', 'inactive'], required: true }
  ];

  const loadData = async () => {
    try {
      setLoading(true);
      setError(null);
      const [districtsData, provincesData] = await Promise.all([
        districtService.getAll(),
        provinceService.getAll()
      ]);
      setDistricts(districtsData);
      setProvinces(provincesData);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load data');
      console.error('Error loading data:', err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadData();
  }, []);

  const handleAdd = () => {
    setEditingDistrict(null);
    setIsModalOpen(true);
  };

  const handleEdit = (district: District) => {
    setEditingDistrict(district);
    setIsModalOpen(true);
  };

  const handleDelete = async (id: string) => {
    if (!window.confirm('Are you sure you want to delete this district? This action cannot be undone.')) {
      return;
    }

    try {
      await districtService.delete(id);
      await loadData(); // Reload data
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to delete district');
      console.error('Error deleting district:', err);
    }
  };

  const handleView = (district: District) => {
    console.log('Viewing district:', district);
    // TODO: Implement view details modal or navigate to details page
  };

  const handleSave = async (data: Partial<District>) => {
    try {
      setError(null);

      // Convert province name to province_id if needed
      const processedData = { ...data };
      if (data.province_id && typeof data.province_id === 'string') {
        const selectedProvince = provinces.find(p => p.name === data.province_id);
        if (selectedProvince) {
          processedData.province_id = selectedProvince.id;
        }
      }

      if (editingDistrict) {
        await districtService.update(editingDistrict.id, processedData);
      } else {
        await districtService.create(processedData as Omit<District, 'id' | 'created_at' | 'updated_at'>);
      }

      setIsModalOpen(false);
      setEditingDistrict(null);
      await loadData(); // Reload data
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to save district');
      console.error('Error saving district:', err);
    }
  };

  const actions = [
    { label: 'View', icon: Eye, onClick: handleView, variant: 'outline' as const },
    { label: 'Edit', icon: Edit2, onClick: handleEdit, variant: 'outline' as const },
    { label: 'Delete', icon: Trash2, onClick: (item: District) => handleDelete(item.id), variant: 'destructive' as const }
  ];

  if (error) {
    return (
      <div className="h-full flex flex-col">
        <Card className="flex-1">
          <CardContent className="p-6">
            <div className="text-center">
              <div className="text-red-600 mb-4">Error: {error}</div>
              <Button onClick={loadData}>Retry</Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="h-full flex flex-col">
      <Tabs value={activeTab} onValueChange={setActiveTab} className="h-full flex flex-col">
        <div className="flex items-center justify-between mb-6">
          <TabsList>
            <TabsTrigger value="list">District List</TabsTrigger>
            <TabsTrigger value="statistics">Statistics</TabsTrigger>
            <TabsTrigger value="administration">Administration</TabsTrigger>
          </TabsList>
          <Button onClick={handleAdd} disabled={provinces.length === 0}>
            <Plus className="h-4 w-4 mr-2" />
            Add District
          </Button>
        </div>

        <TabsContent value="list" className="flex-1">
          <CRUDTable
            data={districts}
            columns={districtColumns}
            actions={actions}
            loading={loading}
            searchPlaceholder="Search districts..."
          />
        </TabsContent>

        <TabsContent value="statistics" className="flex-1">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Card>
              <CardHeader><CardTitle>Total Districts</CardTitle></CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-blue-600">{districts.length}</div>
              </CardContent>
            </Card>
            <Card>
              <CardHeader><CardTitle>Total Population</CardTitle></CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-green-600">
                  {districts.reduce((sum, d) => sum + d.population, 0).toLocaleString()}
                </div>
              </CardContent>
            </Card>
            <Card>
              <CardHeader><CardTitle>Active Districts</CardTitle></CardHeader>
              <CardContent>
                <div className="text-3xl font-bold text-purple-600">
                  {districts.filter(d => d.status === 'active').length}
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="administration" className="flex-1">
          <Card>
            <CardHeader><CardTitle>District Administration</CardTitle></CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="p-4 bg-gray-50 rounded">
                    <div className="font-medium">Average Population</div>
                    <div className="text-2xl font-bold text-green-600">
                      {districts.length > 0 ? Math.round(districts.reduce((sum, d) => sum + d.population, 0) / districts.length).toLocaleString() : 0}
                    </div>
                  </div>
                  <div className="p-4 bg-gray-50 rounded">
                    <div className="font-medium">Average Area</div>
                    <div className="text-2xl font-bold text-blue-600">
                      {districts.length > 0 ? Math.round(districts.reduce((sum, d) => sum + d.area_sq_km, 0) / districts.length).toLocaleString() : 0} km²
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      <AddEditModal
        isOpen={isModalOpen}
        onClose={() => {
          setIsModalOpen(false);
          setEditingDistrict(null);
        }}
        onSave={handleSave}
        title={editingDistrict ? 'Edit District' : 'Add District'}
        fields={getDistrictFormFields()}
        initialData={editingDistrict || {}}
      />
    </div>
  );
}
